ApiConfigure:

	1:

Docker:
	docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=Abcd123!" -e "MSSQL_PID=Developer" -p 1433:1433 --name SQL_Server_DI -v SQL_Server_Volume:/var/opt/mssql -d mcr.microsoft.com/mssql/server:2022-latest


DB:
	CREATE LOGIN AppUserLogin WITH PASSWORD = 'e.d_fwm2()~37hz?+LBT4V';
	CREATE DATABASE GestorPFC;
	USE GestorPFC;
	CREATE USER AppUser FOR LOGIN AppUserLogin;
	GRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::dbo TO AppUser;
	EXEC sp_addrolemember 'db_datareader', 'AppUser';
	EXEC sp_addrolemember 'db_datawriter', 'AppUser';
	GRANT ALTER ON SCHEMA::dbo TO AppUser;
	GRANT REFERENCES ON SCHEMA::dbo TO AppUser;
	GRANT CREATE TABLE TO AppUser;
	GRANT CREATE PROCEDURE TO AppUser;
	GRANT CREATE VIEW TO AppUser;
	GRANT EXECUTE ON SCHEMA::dbo TO AppUser;


	2. Crear el Proyecto en .NET:

dotnet new webapi -n MiApiRest
cd MiApiRest
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Swashbuckle.AspNetCore


"ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=MiApiDb;User Id=sa;Password=TuContraseña;TrustServerCertificate=True;"
}



	3. Crear el modelo de datos Entity.

	4. Configurar la Base de Datos con Entity Framework Core
Crea una carpeta Data y dentro un ApplicationDbContext.cs (ver Relaciones ApplicationDbContext)


	4.2.Registra el contexto en Program.cs:

csharp
Copiar
Editar
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<Usuario, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();


	4.3 Migraciones:
dotnet ef migrations add InitialCreate
dotnet ef database update


	5. Implementar Autenticación y Roles

//Setting Authentication Code
var key = builder.Configuration.GetValue<string>("ApiSettings:SecretKey");

builder.Services.AddAuthentication(auth =>
{
    auth.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    auth.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(x =>
{
    x.RequireHttpsMetadata = false;
    x.SaveToken = true;
    x.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(key)),
        ValidateIssuer = false,
        ValidateAudience = false
    };
});

//Roles
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("WpfUser", policy => policy.RequireRole("wpf_user"));
    options.AddPolicy("AngularUser", policy => policy.RequireRole("angular_user"));
});
	6. Crea un controlador para autenticación: (UserController)





	7. Crear BaseController y controladores para entidades:

